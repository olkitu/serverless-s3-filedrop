service: serverless-FileDrop

frameworkVersion: '2'

custom:
  serverless-offline:
    httpPort: 4000
  s3Sync:
  - bucketName: ${self:custom.prefix}-filedrop-site
    localDir: frontend
    defaultContentType: text/html
  bucketname: ${self:custom.prefix}-filedrop
  prefix: ${env:PREFIX}

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${env:ENV, 'dev'}
  lambdaHashingVersion: '20201221'
  logRetentionInDays: 30
  deploymentBucket:
    blockPublicAccess: true
  iamRoleStatements:
  - Effect: Allow
    Action:
    - s3:ListBucket
    - s3:PutObject
    - s3:GetObject
    Resource:
    - arn:aws:s3:::${self:custom.bucketname}
    - arn:aws:s3:::${self:custom.bucketname}/*
  environment:
    ENV: ${sls:stage}
    BUCKET_NAME: ${self:custom.bucketname}

package:
  patterns:
  - '!.git/**'
  - '!.github/**'
  - '!.gitlab-ci.yml'
  - '!node_modules/**'
  - '!Dockerfile'
  - '!*.sh'
  - '!docker-compose.yml'

resources:
  Resources:
    UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketname}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
        CorsConfiguration:
          CorsRules:
          - Id: CorsRuleId
            AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT]
            AllowedOrigins: ['*']
            MaxAge: '3600'
        LifecycleConfiguration:
          Rules:
          - Id: RemoveFilesInXDays
            Status: Enabled
            ExpirationInDays: ${env:EXPIRATIONINDAYS, 30}
    WebsiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.prefix}-filedrop-site
    WebsiteBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref WebsiteBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref WebsiteBucket
                - '/*'
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
    CloudFront:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: 'true'
          DefaultRootObject: 'index.html'
          DefaultCacheBehavior:
            AllowedMethods:
            - GET
            - HEAD
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            ForwardedValues:
              QueryString: 'false'
          CacheBehaviors:
          - AllowedMethods:
            - GET
            - HEAD
            TargetOriginId: APIOrigin
            ForwardedValues:
              QueryString: 'false'
            ViewerProtocolPolicy: 'https-only'
            PathPattern: '/api/*'
            DefaultTTL: 0
            MinTTL: 0
            MaxTTL: 0
          Origins:
          - DomainName: !Join ['', [!Ref WebsiteBucket, !Sub '.s3.${AWS::Region}.amazonaws.com']]
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity:
                !Join ['', ['origin-access-identity/cloudfront/', !Ref CloudFrontOriginAccessIdentity]]
          - DomainName: !Join
            - ''
            - - Ref: ApiGatewayRestApi
              - !Sub ".execute-api.${AWS::Region}.amazonaws.com"
            Id: APIOrigin
            OriginPath: /${self:provider.stage}
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
              - TLSv1.2
          PriceClass: PriceClass_100
          ViewerCertificate:
            CloudFrontDefaultCertificate: 'true'
    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: OAI for S3 Access
  Outputs:
    CloudfrontDomainName:
      Description: DomainName of CloudFront Endpoint
      Value: !GetAtt CloudFront.DomainName
      Export:
        Name: !Sub sls-${AWS::StackName}-CloudFrontDomainName
      

functions:
  run:
    handler: backend/handler.run
    events:
      - http:
          path: /api/{Key}
          method: get

plugins:
#  - serverless-s3-local
  - serverless-offline
  - serverless-s3-sync